let getUser,redisClient;_c37‍.x([["default",()=>_c37‍.o]]);_c37‍.w("../../../controller/user",[["getUser",["getUser"],function(v){getUser=v}]]);_c37‍.w("../../../redis/redis-client",[["default",["redisClient"],function(v){redisClient=v}]]);


const getFriends =  async (req, res) => {
    try {
      const user = await getUser(req.session.user.name);
      
      await user.populate('friends').execPopulate();

        /* let friends = user.friends.map((el) => { 
        const base64Image = el.image.data.toString('base64');
        return {id: el._id, name: el.name, image: `data:${el.image.contentType};base64,${base64Image}`}}) */

      let onlineFriends = [];
      let friends = []
      redisClient.smembers('onlineUsers', (err, users) => {//DİVİDE USERS İNTO ONLİNE AND OFFLİNE
        if (err) {
            _c37‍.g.console.error('Redis error:', err);
            return callback(err);
        }
        /* console.log("onlineUsers",users) */ // users is the array of online users
        user.friends.forEach((el) => {
          const base64Image = el.image.data.toString('base64');
          const objToPass = {
            id: el._id,
            name: el.name,
            image: `data:${el.image.contentType};base64,${base64Image}`
          }
          friends.push(objToPass)
          if(users.includes(el.name))
          {
            onlineFriends.push(objToPass)
          }
        })
        res.status(200).json({res:{online: onlineFriends, all: [...friends]}});
    });

      /* console.log("FRİENDS Populated Mapped", friends) */

     // res.status(200).json({res: [...friends]});
      return Promise.resolve();
    } catch (error) {
      _c37‍.g.console.log("error on the request", error)
      res.status(500).json({code: error});
    }
  };

  _c37‍.d(getFriends);