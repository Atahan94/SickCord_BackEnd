let redisClient;_ee4‍.x([["default",()=>_ee4‍.o]]);_ee4‍.w("../../../redis/redis-client",[["default",["redisClient"],function(v){redisClient=v}]]);

const voiceChatMembers =  async (req, res) => {
    try {
      const {id} = req.params; // CREATE END POİNT WHERE İT RETURN ALL MEMBERS OF SERVER OF GIVEN ID ON PARAMS

      _ee4‍.g.console.log("ID TYPE", typeof id)
      redisClient.smembers('onlineUsers', (err, users) => {
        if (err) {
            _ee4‍.g.console.error('Redis error:', err);
            return callback(err);
        }
        _ee4‍.g.console.log("VoiceChannel",users) // users is the array of online users
        res.status(200).json({res:[...users]});
    });
    
    return Promise.resolve();
    } catch (error) {
      _ee4‍.g.console.log("error on the request", error)
      res.status(500).json({code: error});
    }
  };

  _ee4‍.d(voiceChatMembers);