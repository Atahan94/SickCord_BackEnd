let getServerById,getUser,updateUser;_9ee‍.x([["default",()=>_9ee‍.o]]);_9ee‍.w("../../../controller/server",[["getServerById",["getServerById"],function(v){getServerById=v}]]);_9ee‍.w("../../../controller/user",[["getUser",["getUser"],function(v){getUser=v}],["updateUser",["updateUser"],function(v){updateUser=v}]]);


const addMember =  async (req, res) => {
    try {
      const {id, memberName} = req.params; // CREATE END POİNT WHERE İT RETURN ALL MEMBERS OF SERVER OF GIVEN ID ON PARAMS
      
     /*  console.log("serverID:", id ,"memberID", memberName) */

      const server = await getServerById(id);
      const member = await getUser(memberName);

      const alreadyMember = server.members.includes(member._id);

      if (alreadyMember) {
        throw new Error("Already member");
      }

      const hasInvitation = member.invitations.some(
        (invitation) => invitation.type === 'server' && invitation.referenceId.equals(server._id)
      );
  
      if (hasInvitation) {
        throw new Error("Already invited");
      }

     
      await updateUser(member._id, {$push: { invitations:{ type: 'server', name: server.name, referenceId: server._id }}})
      
      res.status(200).json({res: "successfully add a member"});
      return Promise.resolve();
    } catch (error) {
      _9ee‍.g.console.log("error on the request", error)
      res.status(500).json({code: error.message});
    }
  };

  _9ee‍.d(addMember);